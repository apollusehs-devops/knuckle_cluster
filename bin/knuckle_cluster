#!/usr/bin/env bundle exec ruby
require "knuckle_cluster"
require "yaml"

profile = ARGV[0]

if ARGV.count < 2
  puts <<~USAGE
    knuckle_cluster CLUSTER_PROFILE agents - list all agents and select one to start a shell
    knuckle_cluster CLUSTER_PROFILE containers - list all containers and select one to start a shell
    knuckle_cluster CLUSTER_PROFILE logs CONTAINER_NAME - tail the logs for a container
    knuckle_cluster CLUSTER_PROFILE CONTAINER_NAME [OPTIONAL COMMANDS] - connect to a container and start a shell or run a command
    knuckle_cluster CLUSTER_PROFILE SHORTCUT_NAME - run a shortcut defined in your knuckle_cluster configuration
    knuckle_cluster CLUSTER_PROFILE tunnel TUNNEL_NAME - open a tunnel defined in your knuckle_cluster configuration
    knuckle_cluster CLUSTER_PROFILE scp [agent|container] source_file destination - copies a file from your local machine to a destaination container or agent
  USAGE
  exit
end

begin
  config = KnuckleCluster::Configuration.load_parameters(profile: profile)
rescue => e
  puts "ERROR: There was a problem loading your configuration: #{e}"
  exit
end

kc = KnuckleCluster.new(
  config
)

if ARGV[1] == 'agents'
  kc.connect_to_agents
elsif ARGV[1] == 'containers'
  kc.connect_to_containers
elsif ARGV[1] == 'logs'
  kc.container_logs(name: ARGV[2])
elsif ARGV[1] == 'tunnel'
  kc.open_tunnel(name: ARGV[2])
elsif ARGV[1] == 'scp'
  if ARGV[2] == 'agent'
    kc.scp_to_agent(source: ARGV[3], destination: ARGV[4])
  elsif ARGV[2] == 'container'
    kc.scp_to_container(source: ARGV[3], destination: ARGV[4])
  end
else
  command = ARGV.drop(2)
  if command.any?
    kc.connect_to_container(name: ARGV[1], command: command.join(' '))
  else
    kc.connect_to_container(name: ARGV[1])
  end
end
